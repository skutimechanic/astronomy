import 'package:test/test.dart';
import 'package:astro_api/astro_api.dart';

// tests for PatchedDJSubscriptions
void main() {
  final instance = PatchedDJSubscriptionsBuilder();
  // TODO add properties to the builder and call build()

  group(PatchedDJSubscriptions, () {
    // int djstripeId
    test('to test the property `djstripeId`', () async {
      // TODO
    });

    // DJSubscriptionsPlan plan
    test('to test the property `plan`', () async {
      // TODO
    });

    // DJSubscriptionsPrice price
    test('to test the property `price`', () async {
      // TODO
    });

    // bool canReactivate
    test('to test the property `canReactivate`', () async {
      // TODO
    });

    // DateTime djstripeCreated
    test('to test the property `djstripeCreated`', () async {
      // TODO
    });

    // DateTime djstripeUpdated
    test('to test the property `djstripeUpdated`', () async {
      // TODO
    });

    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
    // bool livemode
    test('to test the property `livemode`', () async {
      // TODO
    });

    // The datetime this object was created in stripe.
    // DateTime created
    test('to test the property `created`', () async {
      // TODO
    });

    // A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
    // String metadata
    test('to test the property `metadata`', () async {
      // TODO
    });

    // A description of this object.
    // String description
    test('to test the property `description`', () async {
      // TODO
    });

    // A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner's Stripe account each billing period.
    // double applicationFeePercent
    test('to test the property `applicationFeePercent`', () async {
      // TODO
    });

    // Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
    // DateTime billingCycleAnchor
    test('to test the property `billingCycleAnchor`', () async {
      // TODO
    });

    // Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
    // String billingThresholds
    test('to test the property `billingThresholds`', () async {
      // TODO
    });

    // A date in the future at which the subscription will automatically get canceled.
    // DateTime cancelAt
    test('to test the property `cancelAt`', () async {
      // TODO
    });

    // If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
    // bool cancelAtPeriodEnd
    test('to test the property `cancelAtPeriodEnd`', () async {
      // TODO
    });

    // If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    // DateTime canceledAt
    test('to test the property `canceledAt`', () async {
      // TODO
    });

    // Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    // CollectionMethodEnum collectionMethod
    test('to test the property `collectionMethod`', () async {
      // TODO
    });

    // End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.
    // DateTime currentPeriodEnd
    test('to test the property `currentPeriodEnd`', () async {
      // TODO
    });

    // Start of the current period for which the subscription has been invoiced.
    // DateTime currentPeriodStart
    test('to test the property `currentPeriodStart`', () async {
      // TODO
    });

    // Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
    // int daysUntilDue
    test('to test the property `daysUntilDue`', () async {
      // TODO
    });

    // Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
    // String discount
    test('to test the property `discount`', () async {
      // TODO
    });

    // If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.
    // DateTime endedAt
    test('to test the property `endedAt`', () async {
      // TODO
    });

    // Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval.
    // DateTime nextPendingInvoiceItemInvoice
    test('to test the property `nextPendingInvoiceItemInvoice`', () async {
      // TODO
    });

    // If specified, payment collection for this subscription will be paused.
    // String pauseCollection
    test('to test the property `pauseCollection`', () async {
      // TODO
    });

    // Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval.
    // String pendingInvoiceItemInterval
    test('to test the property `pendingInvoiceItemInterval`', () async {
      // TODO
    });

    // If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid.
    // String pendingUpdate
    test('to test the property `pendingUpdate`', () async {
      // TODO
    });

    // DJSubscriptionsProrationBehavior prorationBehavior
    test('to test the property `prorationBehavior`', () async {
      // TODO
    });

    // If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with upcoming invoice endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations
    // DateTime prorationDate
    test('to test the property `prorationDate`', () async {
      // TODO
    });

    // The quantity applied to this subscription. This value will be `null` for multi-plan subscriptions
    // int quantity
    test('to test the property `quantity`', () async {
      // TODO
    });

    // Date when the subscription was first created. The date might differ from the created date due to backdating.
    // DateTime startDate
    test('to test the property `startDate`', () async {
      // TODO
    });

    // The status of this subscription.
    // StatusEnum status
    test('to test the property `status`', () async {
      // TODO
    });

    // If the subscription has a trial, the end of that trial.
    // DateTime trialEnd
    test('to test the property `trialEnd`', () async {
      // TODO
    });

    // If the subscription has a trial, the beginning of that trial.
    // DateTime trialStart
    test('to test the property `trialStart`', () async {
      // TODO
    });

    // The Stripe Account this object belongs to.
    // int djstripeOwnerAccount
    test('to test the property `djstripeOwnerAccount`', () async {
      // TODO
    });

    // The customer associated with this subscription.
    // int customer
    test('to test the property `customer`', () async {
      // TODO
    });

    // The default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.
    // int defaultPaymentMethod
    test('to test the property `defaultPaymentMethod`', () async {
      // TODO
    });

    // The default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.
    // String defaultSource
    test('to test the property `defaultSource`', () async {
      // TODO
    });

    // The most recent invoice this subscription has generated.
    // int latestInvoice
    test('to test the property `latestInvoice`', () async {
      // TODO
    });

    // We can use this SetupIntent to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments.
    // int pendingSetupIntent
    test('to test the property `pendingSetupIntent`', () async {
      // TODO
    });

    // The schedule associated with this subscription.
    // int schedule
    test('to test the property `schedule`', () async {
      // TODO
    });

    // The tax rates that will apply to any subscription item that does not have tax_rates set. Invoices created will have their default_tax_rates populated from the subscription.
    // BuiltList<int> defaultTaxRates
    test('to test the property `defaultTaxRates`', () async {
      // TODO
    });

  });
}
